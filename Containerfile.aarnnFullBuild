# Use an official C++ runtime as a parent image
FROM ubuntu:22.04 as builder

# Make port 80 available to the world outside this container
EXPOSE 80

# Install locales
RUN apt-get update && apt-get install -y locales

# Set the locale to en_GB.utf8
RUN localedef -i en_GB -c -f UTF-8 -A /usr/share/locale/locale.alias en_GB.UTF-8
ENV LANG en_GB.utf8

# Set the working directory in the container
WORKDIR /app

# Set environment variable to make apt-get commands non-interactive
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ="Europe/London"

RUN apt-get update && apt-get install -y \
  apt-utils \
  tzdata

# Preconfigure tzdata package and configure it
RUN ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone && \
    echo "tzdata tzdata/Areas select Etc" | debconf-set-selections && \
    echo "tzdata tzdata/Zones/Etc select UTC" | debconf-set-selections && \
    echo "tzdata tzdata/Areas seen true" | debconf-set-selections && \
    echo "tzdata tzdata/Zones/Etc seen true" | debconf-set-selections && \
    DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    dpkg-reconfigure --frontend noninteractive tzdata

# Combine installation commands and clean up to reduce layer size
RUN apt-get install -y \
  wget \
  curl \
  libpqxx-dev \
  libvtk9-dev \
  python3-vtk9 \
  qtcreator \
  qtbase5-dev \
  qt5-qmake \
  vtk9 \
  build-essential \
  cmake \
  libglew-dev \
  libglew2.2 \
  libboost-all-dev \
  libwebsocketpp-dev \
  libssl-dev \
  libx11-dev \
  libglu1-mesa-dev \
  freeglut3-dev \
  libglfw3-dev \
  libglfw3 \
  libomp-dev \
  pulseaudio \
  libasound2-dev \
  portaudio19-dev \
  libpulse-dev \
  libfftw3-dev \
  libpostproc-dev \
  libavdevice-dev \
  libportaudio2 \
  iputils-ping \
  libgl1-mesa-dev \
  xorg-dev && \
 apt-get clean && \
 rm -rf /var/lib/apt/lists/*

# Copy local files to the docker image
COPY . /app/
RUN rm -rf build || echo "Directory didn't exist." && \
    mkdir build || echo "Directory already exists."
WORKDIR /app/build

# Build the application
RUN cmake .. && echo "CMake successful" || (echo "CMake failed" && exit 1) && \
    make -j $(nproc) && echo "Make successful" || (echo "Make failed" && exit 1)

# Start a new build stage to reduce image size
# FROM ubuntu:22.04

# Set the working directory in the container
WORKDIR /app

# Copy the compiled executable from your host to the current location in your docker image
# COPY --from=builder /app/bin .
# COPY --from=builder /app/bin .

# Database configuration connection information and Simulation data
COPY ./configure/* /app/

# Install necessary libraries for running the application
RUN apt-get update && apt-get install -y \
  libfftw3-3 \
  libportaudio2 \
  pulseaudio-utils && \
  mkdir -p /etc/pulse && \
  mv /app/client.conf /etc/pulse/client.conf && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  chmod +x /app/build/AARNN && \
  chmod +x /app/launch_aarnn.sh

# Run the application when the container launches
CMD ["/app/launch_aarnn.sh"]

