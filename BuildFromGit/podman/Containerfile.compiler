# Use an official build image with CMake and Git
FROM ubuntu:24.04 AS builder

# Install locales
RUN apt-get update && apt-get install -y locales

# Set the locale to en_GB.utf8
RUN localedef -i en_GB -c -f UTF-8 -A /usr/share/locale/locale.alias en_GB.UTF-8
ENV LANG en_GB.utf8

# Set the working directory in the container
WORKDIR /app

# Set environment variable to make apt-get commands non-interactive
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ="Europe/London"

RUN apt-get update && apt-get install -y \
  apt-utils \
  tzdata

# Preconfigure tzdata package and configure it
RUN ln -fs /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone && \
    echo "tzdata tzdata/Areas select Etc" | debconf-set-selections && \
    echo "tzdata tzdata/Zones/Etc select UTC" | debconf-set-selections && \
    echo "tzdata tzdata/Areas seen true" | debconf-set-selections && \
    echo "tzdata tzdata/Zones/Etc seen true" | debconf-set-selections && \
    DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    dpkg-reconfigure --frontend noninteractive tzdata

# Combine installation commands and clean up to reduce layer size
RUN apt-get update && \
        apt-get install -y software-properties-common && \
        add-apt-repository ppa:ubuntu-toolchain-r/test && \
        apt-get update && \
        apt-get install -y \
  build-essential \
  cmake \
  curl \
  freeglut3-dev \
  git \
  iputils-ping \
  libasound2-dev \
  libavcodec-dev \
  libavdevice-dev \
  libavformat-dev \
  libavutil-dev \
  libboost-all-dev \
  libcgal-dev \
  libcurl4 \
  libcurl4-openssl-dev \
  libfftw3-dev \
  libgl1-mesa-dev \
  libglew-dev \
  libglew2.2 \
  libglfw3 \
  libglfw3-dev \
  libglu1-mesa-dev \
  libgmp-dev \
  libmpfr-dev \
  libomp-dev \
  libportaudio2 \
  libportaudiocpp0 \
  libpostproc-dev \
  libpqxx-dev \
  libpulse-dev \
  libssl-dev \
  libswscale-dev \
  libswresample-dev \
  libvtk9-dev \
  libwebsocketpp-dev \
  libx11-dev \
  pkg-config \
  portaudio19-dev \
  pulseaudio \
  python3-vtk9 \
  qt5-qmake \
  qtbase5-dev \
  qtcreator \
  vtk9 \
  wget \
  xorg-dev && \
 apt-get clean && \
 rm -rf /var/lib/apt/lists/*

# Set the working directory
WORKDIR /app

# Clone the GitHub repository
ARG REPO_URL
RUN git clone $REPO_URL source

# Build the application
WORKDIR /app/source
RUN mkdir build && cd build && cmake .. && make

# The compiled binaries are now in /app/source/build
