#include <iostream>
#include <utility>
#include <vector>
#include <list>
#include <algorithm>
#include <thread>
#include <mutex>
#include <atomic>
#include <cmath>
#include <memory>
#include <pqxx/pqxx>
#include <stdexcept>
#include <fstream>
#include <string>
#include <tuple>
#include <map>
#include <set>
#include <chrono>
#include <cstdlib>
#include <cstring>
#include <random>
#include "boostincludes.h"
#include "vtkincludes.h"

// Configuration and Logger Initialization

std::map<std::string, std::string> read_config(const std::vector<std::string>& filenames) {
    std::map<std::string, std::string> config;
    for (const auto& filename : filenames) {
        std::ifstream file(filename);
        std::string line;
        while (std::getline(file, line)) {
            std::string key, value;
            std::istringstream line_stream(line);
            std::getline(line_stream, key, '=');
            std::getline(line_stream, value);
            config[key] = value;
        }
    }
    return config;
}

std::string build_connection_string(const std::map<std::string, std::string>& config) {
    std::string connection_string;
    std::set<std::string> allowed_params = {"host", "port", "user", "password", "dbname"};
    for (const auto& entry : config) {
        if (allowed_params.count(entry.first) > 0) {
            connection_string += entry.first + "=" + entry.second + " ";
        }
    }
    return connection_string;
}

class Logger {
public:
    explicit Logger(const std::string& filename) : log_file(filename, std::ofstream::out | std::ofstream::app) {}
    ~Logger() { log_file.close(); }
    template<typename T>
    Logger& operator<<(const T& msg) {
        log_file << msg;
        log_file.flush();
        return *this;
    }
    Logger& operator<<(std::ostream& (*pf)(std::ostream&)) {
        log_file << pf;
        log_file.flush();
        return *this;
    }
private:
    std::ofstream log_file;
};

// VTK Initialization

vtkSmartPointer<vtkRenderer> init_renderer() {
    vtkSmartPointer<vtkRenderer> renderer = vtkSmartPointer<vtkRenderer>::New();
    return renderer;
}

vtkSmartPointer<vtkRenderWindow> init_render_window(vtkSmartPointer<vtkRenderer>& renderer) {
    vtkSmartPointer<vtkRenderWindow> renderWindow = vtkSmartPointer<vtkRenderWindow>::New();
    renderWindow->AddRenderer(renderer);
    return renderWindow;
}

vtkSmartPointer<vtkRenderWindowInteractor> init_interactor(vtkSmartPointer<vtkRenderWindow>& renderWindow) {
    vtkSmartPointer<vtkRenderWindowInteractor> interactor = vtkSmartPointer<vtkRenderWindowInteractor>::New();
    interactor->SetRenderWindow(renderWindow);
    return interactor;
}

// Database Operations

std::shared_ptr<pqxx::connection> init_db_connection(const std::string& connection_string, Logger& logger) {
    std::shared_ptr<pqxx::connection> conn = std::make_shared<pqxx::connection>(connection_string);
    logger << "Connected to PostgreSQL." << std::endl;
    return conn;
}

// Insert Dendrite Branches

void insertDendriteBranches(pqxx::transaction_base& txn, const vtkSmartPointer<vtkPoints>& points, vtkSmartPointer<vtkCellArray>& lines, vtkSmartPointer<vtkPoints>& glyphPoints, vtkNew<vtkFloatArray>& glyphVectors, vtkSmartPointer<vtkUnsignedCharArray>& glyphTypes, int& dendrite_branch_id, int& dendrite_id, int& dendrite_bouton_id, int& soma_id) {
    int dendriteBranchGlyphType;
    int dendriteGlyphType = 3;
    int dendriteBoutonGlyphType = 2;
    vtkIdType dendriteBranchAnchor;
    vtkIdType dendriteAnchor;
    vtkIdType dendriteBoutonAnchor;
    vtkIdType glyphDendriteBranchAnchor;
    vtkIdType glyphDendriteAnchor;
    vtkIdType glyphDendriteBoutonAnchor;
    double x, y, z;
    double glyphVectorBlank[3] = {0.0, 0.0, 0.0};
    static const std::string dendrite_branch_query = "SELECT dendrite_branch_id, dendrite_id, x, y, z FROM dendritebranches WHERE dendrite_id = $1 ORDER BY dendrite_branch_id ASC";
    static const std::string dendrite_branch_soma_query = "SELECT dendrite_branch_id, soma_id, x, y, z FROM dendritebranches_soma WHERE soma_id = $1 ORDER BY dendrite_branch_id ASC";
    static const std::string dendrite_query = "SELECT dendrite_id, dendrite_branch_id, x, y, z FROM dendrites WHERE dendrite_branch_id = $1 ORDER BY dendrite_id ASC";
    static const std::string dendrite_bouton_query = "SELECT dendrite_bouton_id, dendrite_id, x, y, z FROM dendriteboutons WHERE dendrite_id = $1 ORDER BY dendrite_bouton_id ASC";
    pqxx::result dendritebranches;
    pqxx::result innerdendritebranches;
    pqxx::result dendrites;
    pqxx::result dendriteboutons;
    vtkSmartPointer<vtkLine> line;

    if (soma_id == -1) {
        dendritebranches = txn.exec_params(dendrite_branch_query, dendrite_id);
        dendriteBranchGlyphType = 2;
    } else {
        dendritebranches = txn.exec_params(dendrite_branch_soma_query, soma_id);
        dendriteBranchGlyphType = 3;
    }

    for (auto dendritebranch: dendritebranches) {
        dendrite_branch_id = dendritebranch[0].as<int>();
        x = dendritebranch[2].as<double>();
        y = dendritebranch[3].as<double>();
        z = dendritebranch[4].as<double>();
        points->InsertNextPoint(x, y, z);
        dendriteBranchAnchor = points->GetNumberOfPoints() - 1;
        glyphPoints->InsertNextPoint(x, y, z);
        glyphDendriteBranchAnchor = glyphPoints->GetNumberOfPoints() - 1;
        glyphVectors->InsertNextTuple(glyphVectorBlank);
        glyphTypes->InsertNextValue(0);

        dendrites = txn.exec_params(dendrite_query, dendrite_branch_id);
        for (auto dendrite: dendrites) {
            dendrite_id = dendrite[0].as<int>();
            x = dendrite[2].as<double>();
            y = dendrite[3].as<double>();
            z = dendrite[4].as<double>();
            points->InsertNextPoint(x, y, z);
            dendriteAnchor = points->GetNumberOfPoints() - 1;
            glyphPoints->InsertNextPoint(x, y, z);
            glyphDendriteAnchor = glyphPoints->GetNumberOfPoints() - 1;
            line = vtkSmartPointer<vtkLine>::New();
            line->GetPointIds()->SetId(0, dendriteBranchAnchor);
            line->GetPointIds()->SetId(1, dendriteAnchor);
            lines->InsertNextCell(line);
            double glyphVector[3] = {
                    glyphPoints->GetPoint(glyphDendriteAnchor)[0] - glyphPoints->GetPoint(glyphDendriteBranchAnchor)[0],
                    glyphPoints->GetPoint(glyphDendriteAnchor)[1] - glyphPoints->GetPoint(glyphDendriteBranchAnchor)[1],
                    glyphPoints->GetPoint(glyphDendriteAnchor)[2] - glyphPoints->GetPoint(glyphDendriteBranchAnchor)[2]};
            glyphVectors->InsertNextTuple(glyphVector);
            glyphTypes->InsertNextValue(dendriteGlyphType);

            dendriteboutons = txn.exec_params(dendrite_bouton_query, dendrite_id);
            for (auto dendritebouton: dendriteboutons) {
                dendrite_bouton_id = dendritebouton[0].as<int>();
                x = dendritebouton[2].as<double>();
                y = dendritebouton[3].as<double>();
                z = dendritebouton[4].as<double>();
                points->InsertNextPoint(x, y, z);
                dendriteBoutonAnchor = points->GetNumberOfPoints() - 1;
                glyphPoints->InsertNextPoint(x, y, z);
                glyphDendriteBoutonAnchor = glyphPoints->GetNumberOfPoints() - 1;
                double glyphVector[3] = {
                        glyphPoints->GetPoint(glyphDendriteBoutonAnchor)[0] - glyphPoints->GetPoint(glyphDendriteAnchor)[0],
                        glyphPoints->GetPoint(glyphDendriteBoutonAnchor)[1] - glyphPoints->GetPoint(glyphDendriteAnchor)[1],
                        glyphPoints->GetPoint(glyphDendriteBoutonAnchor)[2] - glyphPoints->GetPoint(glyphDendriteAnchor)[2]};
                glyphVectors->InsertNextTuple(glyphVector);
                glyphTypes->InsertNextValue(dendriteBoutonGlyphType);
            }

            innerdendritebranches = txn.exec_params(dendrite_branch_query, dendrite_id);
            soma_id = -1;
            for (auto innerdendritebranch: innerdendritebranches) {
                insertDendriteBranches(txn, points, lines, glyphPoints, glyphVectors, glyphTypes, dendrite_branch_id, dendrite_id, dendrite_bouton_id, soma_id);
            }
        }
    }
}

// Insert Axons

void insertAxons(pqxx::transaction_base& txn, const vtkSmartPointer<vtkPoints>& points, vtkSmartPointer<vtkCellArray>& lines, vtkSmartPointer<vtkPoints>& glyphPoints, vtkNew<vtkFloatArray>& glyphVectors, vtkSmartPointer<vtkUnsignedCharArray>& glyphTypes, int& axon_branch_id, int& axon_id, int& axon_bouton_id, int& synaptic_gap_id, int& axon_hillock_id, long& glyphAxonBranchAnchor) {
    int axonBranchGlyphType;
    int axonGlyphType = 8;
    int axonBoutonGlyphType = 9;
    int synapticGapGlyphType = 10;
    vtkIdType axonBranchAnchor;
    vtkIdType axonAnchor;
    vtkIdType axonBoutonAnchor;
    vtkIdType synapticGapAnchor;
    vtkIdType glyphAxonAnchor;
    vtkIdType glyphAxonBoutonAnchor;
    vtkIdType glyphSynapticGapAnchor;
    double x, y, z;
    double glyphVectorBlank[3] = {0.0, 0.0, 0.0};
    static const std::string axon_branch_query = "SELECT axon_id, axon_branch_id, x, y, z FROM axons WHERE axon_branch_id = $1 ORDER BY axon_id ASC";
    static const std::string axon_hillock_query = "SELECT axon_id, axon_hillock_id, x, y, z FROM axons WHERE axon_hillock_id = $1 ORDER BY axon_id ASC";
    static const std::string axon_bouton_query = "SELECT axon_bouton_id, axon_id, x, y, z FROM axonboutons WHERE axon_id = $1 ORDER BY axon_bouton_id ASC";
    static const std::string synaptic_gap_axon_bouton_query = "SELECT synaptic_gap_id, axon_bouton_id, x, y, z FROM synapticgaps WHERE axon_bouton_id = $1 ORDER BY synaptic_gap_id ASC";
    pqxx::result axonbranches;
    pqxx::result inneraxonbranches;
    pqxx::result axons;
    pqxx::result axonboutons;
    pqxx::result synapticgaps;
    vtkSmartPointer<vtkLine> line;

    if (axon_hillock_id == -1) {
        axons = txn.exec_params(axon_branch_query, axon_branch_id);
        axonBranchGlyphType = 6;
    } else {
        axons = txn.exec_params(axon_hillock_query, axon_hillock_id);
        axonBranchGlyphType = 7;
    }

    for (auto axon: axons) {
        axon_id = axon[0].as<int>();
        x = axon[2].as<double>();
        y = axon[3].as<double>();
        z = axon[4].as<double>();
        points->InsertNextPoint(x, y, z);
        axonAnchor = points->GetNumberOfPoints() - 1;
        glyphPoints->InsertNextPoint(x, y, z);
        glyphAxonAnchor = glyphPoints->GetNumberOfPoints() - 1;
        line = vtkSmartPointer<vtkLine>::New();
        line->GetPointIds()->SetId(0, axonBranchAnchor);
        line->GetPointIds()->SetId(1, axonAnchor);
        lines->InsertNextCell(line);
        double glyphVector[3] = {
                glyphPoints->GetPoint(glyphAxonAnchor)[0] - glyphPoints->GetPoint(glyphAxonBranchAnchor)[0],
                glyphPoints->GetPoint(glyphAxonAnchor)[1] - glyphPoints->GetPoint(glyphAxonBranchAnchor)[1],
                glyphPoints->GetPoint(glyphAxonAnchor)[2] - glyphPoints->GetPoint(glyphAxonBranchAnchor)[2]};
        glyphVectors->InsertNextTuple(glyphVector);
        glyphTypes->InsertNextValue(axonGlyphType);

        axonboutons = txn.exec_params(axon_bouton_query, axon_id);
        for (auto axonbouton: axonboutons) {
            axon_bouton_id = axonbouton[0].as<int>();
            x = axonbouton[2].as<double>();
            y = axonbouton[3].as<double>();
            z = axonbouton[4].as<double>();
            points->InsertNextPoint(x, y, z);
            axonBoutonAnchor = points->GetNumberOfPoints() - 1;
            glyphPoints->InsertNextPoint(x, y, z);
            glyphAxonBoutonAnchor = glyphPoints->GetNumberOfPoints() - 1;
            line = vtkSmartPointer<vtkLine>::New();
            line->GetPointIds()->SetId(0, axonAnchor);
            line->GetPointIds()->SetId(1, axonBoutonAnchor);
            lines->InsertNextCell(line);
            double glyphVector[3] = {
                    glyphPoints->GetPoint(glyphAxonBoutonAnchor)[0] - glyphPoints->GetPoint(glyphAxonAnchor)[0],
                    glyphPoints->GetPoint(glyphAxonBoutonAnchor)[1] - glyphPoints->GetPoint(glyphAxonAnchor)[1],
                    glyphPoints->GetPoint(glyphAxonBoutonAnchor)[2] - glyphPoints->GetPoint(glyphAxonAnchor)[2]};
            glyphVectors->InsertNextTuple(glyphVector);
            glyphTypes->InsertNextValue(axonBoutonGlyphType);

            synapticgaps = txn.exec_params(synaptic_gap_axon_bouton_query, axon_bouton_id);
            for (auto synapticgap: synapticgaps) {
                synaptic_gap_id = synapticgap[0].as<int>();
                x = synapticgap[2].as<double>();
                y = synapticgap[3].as<double>();
                z = synapticgap[4].as<double>();
                points->InsertNextPoint(x, y, z);
                synapticGapAnchor = points->GetNumberOfPoints() - 1;
                glyphPoints->InsertNextPoint(x, y, z);
                glyphSynapticGapAnchor = glyphPoints->GetNumberOfPoints() - 1;
                glyphVectors->InsertNextTuple(glyphVectorBlank);
                glyphTypes->InsertNextValue(synapticGapGlyphType);
            }
        }

        for (auto axonbranch: axonbranches) {
            axon_branch_id = axonbranch[0].as<int>();
            x = axonbranch[2].as<double>();
            y = axonbranch[3].as<double>();
            z = axonbranch[4].as<double>();
            points->InsertNextPoint(x, y, z);
            axonBranchAnchor = points->GetNumberOfPoints() - 1;
            glyphPoints->InsertNextPoint(x, y, z);
            glyphAxonBranchAnchor = glyphPoints->GetNumberOfPoints() - 1;
            line = vtkSmartPointer<vtkLine>::New();
            line->GetPointIds()->SetId(0, axonAnchor);
            line->GetPointIds()->SetId(1, axonBranchAnchor);
            lines->InsertNextCell(line);
            double glyphVector[3] = {
                    glyphPoints->GetPoint(glyphAxonBranchAnchor)[0] - glyphPoints->GetPoint(glyphAxonAnchor)[0],
                    glyphPoints->GetPoint(glyphAxonBranchAnchor)[1] - glyphPoints->GetPoint(glyphAxonAnchor)[1],
                    glyphPoints->GetPoint(glyphAxonBranchAnchor)[2] - glyphPoints->GetPoint(glyphAxonAnchor)[2]};
            glyphVectors->InsertNextTuple(glyphVector);
            glyphTypes->InsertNextValue(axonBranchGlyphType);

            inneraxonbranches = txn.exec_params(axon_branch_query, axon_id);
            axon_hillock_id = -1;
            for (auto inneraxonbranch: inneraxonbranches) {
                insertAxons(txn, points, lines, glyphPoints, glyphVectors, glyphTypes, axon_branch_id, axon_id, axon_bouton_id, synaptic_gap_id, axon_hillock_id, glyphAxonBranchAnchor);
            }
        }
    }
}

// Error Observer Class

class MyErrorObserver : public vtkCommand {
public:
    static MyErrorObserver* New() { return new MyErrorObserver; }
    void Execute(vtkObject* vtkNotUsed(caller), unsigned long event, void* calldata) override {
        if (event == vtkCommand::ErrorEvent || event == vtkCommand::WarningEvent) {
            std::cerr << "Error: " << static_cast<char*>(calldata) << std::endl;
        }
    }
};

// Main Loop Logic

void main_loop(std::shared_ptr<pqxx::connection> conn, vtkSmartPointer<vtkRenderer>& renderer, vtkSmartPointer<vtkRenderWindow>& renderWindow, vtkSmartPointer<vtkRenderWindowInteractor>& interactor, Logger& logger) {
    vtkSmartPointer<vtkPoints> points = vtkSmartPointer<vtkPoints>::New();
    vtkSmartPointer<vtkPoints> glyphPoints = vtkSmartPointer<vtkPoints>::New();
    vtkSmartPointer<vtkCellArray> lines = vtkSmartPointer<vtkCellArray>::New();
    vtkSmartPointer<vtkUnsignedCharArray> glyphTypes = vtkSmartPointer<vtkUnsignedCharArray>::New();
    glyphTypes->SetName("GlyphType");
    glyphTypes->SetNumberOfComponents(1);
    vtkNew<vtkFloatArray> glyphVectors;
    glyphVectors->SetNumberOfComponents(3);
    glyphVectors->SetName("vectors");

    while (true) {
        try {
            long glyphAxonBranchAnchor = 0;
            double x = 0;
            double y = 0;
            double z = 0;
            int neuron_id = 1;
            int soma_id = 1;
            int dendrite_branch_id = 1;
            int dendrite_id = 1;
            int axon_hillock_id = 1;
            int axon_branch_id = 1;
            int axon_id = 1;
            int synaptic_gap_id = 1;
            int axon_bouton_id = 1;
            int dendrite_bouton_id = 1;
            double glyphVectorBlank[3] = {0.0, 0.0, 0.0};

            renderWindow->RemoveRenderer(renderer);
            renderer->RemoveAllViewProps();
            glyphTypes->Reset();
            glyphVectors->Reset();
            glyphPoints->Reset();
            lines->Reset();
            points->Reset();

            pqxx::work txn(*conn);
            pqxx::result neurons = txn.exec("SELECT neuron_id, x, y, z FROM neurons ORDER BY neuron_id ASC LIMIT 1500");

            for (auto neuron : neurons) {
                neuron_id = neuron[0].as<int>();
                x = neuron[1].as<double>();
                y = neuron[2].as<double>();
                z = neuron[3].as<double>();
                glyphPoints->InsertNextPoint(x, y, z);
                glyphVectors->InsertNextTuple(glyphVectorBlank);
                glyphTypes->InsertNextValue(0);

                pqxx::result somas = txn.exec_params("SELECT soma_id, neuron_id, x, y, z FROM somas WHERE neuron_id = $1 ORDER BY soma_id ASC", neuron_id);
                for (auto soma: somas) {
                    soma_id = soma[0].as<int>();
                    x = soma[2].as<double>();
                    y = soma[3].as<double>();
                    z = soma[4].as<double>();
                    glyphPoints->InsertNextPoint(x, y, z);
                    glyphVectors->InsertNextTuple(glyphVectorBlank);
                    glyphTypes->InsertNextValue(1);

                    insertDendriteBranches(txn, points, lines, glyphPoints, glyphVectors, glyphTypes, dendrite_branch_id, dendrite_id, dendrite_bouton_id, soma_id);

                    pqxx::result axonhillocks = txn.exec_params("SELECT axon_hillock_id, soma_id, x, y, z FROM axonhillocks WHERE soma_id = $1 ORDER BY axon_hillock_id ASC", soma_id);
                    for (auto axonhillock: axonhillocks) {
                        axon_hillock_id = axonhillock[0].as<int>();
                        x = axonhillock[2].as<double>();
                        y = axonhillock[3].as<double>();
                        z = axonhillock[4].as<double>();
                        points->InsertNextPoint(x, y, z);
                        glyphPoints->InsertNextPoint(x, y, z);
                        glyphVectors->InsertNextTuple(glyphVectorBlank);
                        glyphTypes->InsertNextValue(1);
                        glyphAxonBranchAnchor = glyphPoints->GetNumberOfPoints() - 1;

                        insertAxons(txn, points, lines, glyphPoints, glyphVectors, glyphTypes, axon_branch_id, axon_id, axon_bouton_id, synaptic_gap_id, axon_hillock_id, glyphAxonBranchAnchor);
                    }
                }
            }

            vtkSmartPointer<vtkPolyData> polyData = vtkSmartPointer<vtkPolyData>::New();
            polyData->SetPoints(points);
            polyData->SetLines(lines);
            vtkSmartPointer<vtkPolyData> polyPointData = vtkSmartPointer<vtkPolyData>::New();
            polyPointData->SetPoints(points);

            vtkSmartPointer<vtkPolyData> glyphPolyData = vtkSmartPointer<vtkPolyData>::New();
            glyphPolyData->SetPoints(glyphPoints);
            glyphPolyData->GetPointData()->AddArray(glyphVectors);
            glyphPolyData->GetPointData()->SetScalars(glyphTypes);

            vtkSmartPointer<vtkPoints> zeroPoints = vtkSmartPointer<vtkPoints>::New();
            vtkSmartPointer<vtkPolyData> emptySource = vtkSmartPointer<vtkPolyData>::New();
            vtkSmartPointer<vtkSphereSource> sphereSource = vtkSmartPointer<vtkSphereSource>::New();
            vtkSmartPointer<vtkCubeSource> cubeSource = vtkSmartPointer<vtkCubeSource>::New();
            vtkSmartPointer<vtkCylinderSource> cylinderSource = vtkSmartPointer<vtkCylinderSource>::New();

            emptySource->SetPoints(zeroPoints);
            sphereSource->SetRadius(0.5);
            sphereSource->Update();
            cubeSource->SetXLength(0.5);
            cubeSource->SetYLength(0.5);
            cubeSource->SetZLength(0.5);
            cubeSource->Update();
            cylinderSource->SetRadius(0.1);
            cylinderSource->Update();

            vtkSmartPointer<vtkGlyph3D> glyph3D = vtkSmartPointer<vtkGlyph3D>::New();
            glyph3D->SetOrient(true);
            glyph3D->SetVectorModeToUseVector();
            glyph3D->SetScaleModeToScaleByVector();
            glyph3D->SetScaleFactor(1.0);
            glyph3D->SetInputData(glyphPolyData);
            glyph3D->SetSourceData(0, emptySource);
            glyph3D->SetSourceData(1, cubeSource->GetOutput());
            glyph3D->SetSourceData(2, sphereSource->GetOutput());
            glyph3D->SetSourceData(3, cylinderSource->GetOutput());
            glyph3D->SetSourceData(4, cylinderSource->GetOutput());
            glyph3D->SetSourceData(5, cylinderSource->GetOutput());
            glyph3D->SetSourceData(6, cylinderSource->GetOutput());
            glyph3D->SetSourceData(7, cylinderSource->GetOutput());
            glyph3D->SetSourceData(8, cylinderSource->GetOutput());
            glyph3D->SetSourceData(9, sphereSource->GetOutput());
            glyph3D->SetSourceData(10, sphereSource->GetOutput());
            glyph3D->SetInputArrayToProcess(0, 0, 0, vtkDataObject::FIELD_ASSOCIATION_POINTS, "GlyphType");
            glyph3D->Update();

            vtkSmartPointer<vtkPolyDataMapper> lineMapper = vtkSmartPointer<vtkPolyDataMapper>::New();
            lineMapper->SetInputData(polyData);
            vtkSmartPointer<vtkActor> lineActor = vtkSmartPointer<vtkActor>::New();
            lineActor->SetMapper(lineMapper);
            lineActor->GetProperty()->SetColor(1.0, 1.0, 0.0);

            vtkSmartPointer<vtkPolyDataMapper> glyphMapper = vtkSmartPointer<vtkPolyDataMapper>::New();
            glyphMapper->SetInputConnection(glyph3D->GetOutputPort());
            vtkSmartPointer<vtkActor> glyphActor = vtkSmartPointer<vtkActor>::New();
            glyphActor->SetMapper(glyphMapper);

            vtkSmartPointer<vtkDelaunay3D> delaunay = vtkSmartPointer<vtkDelaunay3D>::New();
            delaunay->SetInputData(polyPointData);
            vtkSmartPointer<vtkGeometryFilter> geometryFilter = vtkSmartPointer<vtkGeometryFilter>::New();
            geometryFilter->SetInputConnection(delaunay->GetOutputPort());
            geometryFilter->Update();

            vtkSmartPointer<vtkPolyDataMapper> membraneMapper = vtkSmartPointer<vtkPolyDataMapper>::New();
            membraneMapper->SetInputConnection(geometryFilter->GetOutputPort());
            vtkSmartPointer<vtkActor> membraneActor = vtkSmartPointer<vtkActor>::New();
            membraneActor->SetMapper(membraneMapper);
            membraneActor->GetProperty()->SetColor(0.75, 0.75, 0.75);
            membraneActor->GetProperty()->SetOpacity(0.1);

            renderer->AddActor(lineActor);
            renderer->AddActor(glyphActor);
            renderer->AddActor(membraneActor);
            renderWindow->AddRenderer(renderer);
            interactor->SetRenderWindow(renderWindow);
            interactor->Start();

            txn.commit();
            std::this_thread::sleep_for(std::chrono::seconds(5));
        } catch (const std::exception& e) {
            logger << "Error in loop: " << e.what() << std::endl;
            std::cerr << "Error in loop: " << e.what() << std::endl;
        } catch (...) {
            logger << "Unknown error in loop." << std::endl;
            std::cerr << "Unknown error in loop." << std::endl;
        }
    }
}

// Main Function

int main() {
    Logger logger("errors.log");

    vtkSmartPointer<vtkOutputWindow> myOutputWindow = vtkSmartPointer<vtkOutputWindow>::New();
    vtkOutputWindow::SetInstance(myOutputWindow);

    vtkSmartPointer<MyErrorObserver> errorObserver = vtkSmartPointer<MyErrorObserver>::New();
    myOutputWindow->AddObserver(vtkCommand::ErrorEvent, errorObserver);
    myOutputWindow->AddObserver(vtkCommand::WarningEvent, errorObserver);

    vtkSmartPointer<vtkRenderer> renderer = init_renderer();
    vtkSmartPointer<vtkRenderWindow> renderWindow = init_render_window(renderer);
    vtkSmartPointer<vtkRenderWindowInteractor> interactor = init_interactor(renderWindow);

    try {
        std::vector<std::string> config_filenames = {"db_connection.conf", "simulation.conf"};
        auto config = read_config(config_filenames);
        std::string connection_string = build_connection_string(config);

        auto conn = init_db_connection(connection_string, logger);

        main_loop(conn, renderer, renderWindow, interactor, logger);
    } catch (const std::exception& e) {
        logger << "Error: " << e.what() << std::endl;
        std::cerr << "Error: " << e.what() << std::endl;
    } catch (...) {
        logger << "Error: Unknown exception occurred." << std::endl;
        std::cerr << "Error: Unknown exception occurred." << std::endl;
    }

    return 0;
}
